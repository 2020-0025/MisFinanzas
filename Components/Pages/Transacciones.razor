@page "/transactions"
@using MisFinanzas.Domain.DTOs
@using MisFinanzas.Domain.Enums
@using MisFinanzas.Infrastructure.Interfaces
@using System.Security.Claims
@inject ITransactionService TransactionService
@inject ICategoryService CategoryService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Transacciones - Mis Finanzas</PageTitle>

<div class="transactions-container">

    <!-- Header con efecto glass -->
    <div class="glass-card transactions-header animate-slide-up">
        <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
            <div>
                <h1 class="h3 mb-1 text-white fw-bold">
                    <span style="font-size: 32px;">💳</span>
                    <strong>Transacciones</strong>
                </h1>
                <p class="text-white mb-0">Gestiona tus movimientos financieros</p>
            </div>
            <button class="glass-button-action text-white" @onclick="OpenCreateModal">
                <span style="font-size: 17px;">➕</span>Nueva Transacción
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="glass-card text-center py-5 animate-slide-up animate-delay-1">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="text-white-50 mt-3 mb-0">Cargando transacciones...</p>
        </div>
    }
    else if (!transactions.Any())
    {
        <div class="glass-card animate-slide-up animate-delay-1">
            <div class="empty-state-transactions">
                <i class="bi bi-receipt"></i>
                <h5 class="text-white mt-3 mb-2">No hay transacciones</h5>
                <p class="text-white-50 mb-4">Registra tu primera transacción para comenzar a controlar tus finanzas</p>

                @if (!categories.Any())
                {
                    <div class="alert-glass alert-warning mb-3">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        Primero necesitas crear al menos una categoría.
                        <a href="/categories" class="alert-link-glass">Crear categoría</a>
                    </div>
                }
                else
                {
                    <button class="glass-button-action" @onclick="OpenCreateModal">
                        <i class="bi bi-plus-circle me-2"></i>Crear Transacción
                    </button>
                }
            </div>
        </div>
    }
    else
    {
        <!-- Filtros -->
        <div class="glass-card mb-4 animate-slide-up animate-delay-1">
            <div class="filters-grid">
                <div class="filter-item">
                    <label class="form-label-glass text-white">Filtrar por Categoría</label>
                    <select class="form-control-glass" @bind="filterCategoryId">
                        <option value="0">Todas las categorías</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category.CategoryId">@category.TitleWithIcon</option>
                        }
                    </select>
                </div>
                <div class="filter-item">
                    <label class="form-label-glass text-white">Filtrar por Tipo</label>
                    <select class="form-control-glass" @bind="filterType">
                        <option value="">Todos</option>
                        <option value="Income">Ingresos</option>
                        <option value="Expense">Gastos</option>
                    </select>
                </div>
                <div class="filter-item">
                    <label class="form-label-glass text-white">Ordenar por</label>
                    <select class="form-control-glass" @bind="sortOrder">
                        <option value="newest">Más recientes</option>
                        <option value="oldest">Más antiguas</option>
                        <option value="highest">Mayor monto</option>
                        <option value="lowest">Menor monto</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Tabla de transacciones -->
        <div class="glass-card animate-slide-up animate-delay-2">
            <div class="table-responsive">
                <table class="table-glass-transactions mb-0">
                    <thead>
                        <tr>
                            <th class="text-white">Categoría</th>
                            <th class="text-white">Monto</th>
                            <th class="text-white">Nota</th>
                            <th class="text-white">Fecha</th>
                            <th class="text-end text-white">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in FilteredAndSortedTransactions)
                        {
                            <tr class="transaction-row">
                                <td>
                                    <div class="d-flex align-items-center gap-2">
                                        <span class="transaction-icon">@transaction.CategoryIcon</span>
                                        <span class="text-white fw-semibold">@transaction.CategoryName</span>
                                    </div>
                                </td>
                                <td>
                                    <span class="transaction-amount @(GetCategoryType(transaction.CategoryId) == TransactionType.Income ? "amount-income" : "amount-expense")">
                                        @transaction.FormattedAmount
                                    </span>
                                </td>
                                <td>
                                    <span class="text-white">@transaction.Note</span>
                                </td>
                                <td>
                                    <small class="text-white">@transaction.Date.ToString("dd/MM/yyyy")</small>
                                </td>
                                <td class="text-end">
                                    <button class="btn-action btn-edit" @onclick="() => OpenEditModal(transaction)" title="Editar">
                                        <span style="font-size: 13px;">📝</span>
                                    </button>
                                    <button class="btn-action btn-delete" @onclick="() => DeleteTransaction(transaction.TransactionId)" title="Eliminar">
                                        <span style="font-size: 13px;">🗑️</span>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Resumen -->
        <div class="glass-card mt-3 animate-slide-up animate-delay-3">
            <div class="summary-grid">
                <div class="summary-item">
                    <span style="font-size: 13px;">ℹ️</span>
                    <span class="text-white">Total: @FilteredAndSortedTransactions.Count() transacción(es)</span>
                </div>
                <div class="summary-item summary-income">
                    <span style="font-size: 13px;">📈</span>
                    <span>Ingresos: @CalculateTotalIncome().ToString("C2")</span>
                </div>
                <div class="summary-item summary-expense">
                    <span style="font-size: 13px;">📉</span>
                    <span>Gastos: @CalculateTotalExpense().ToString("C2")</span>
                </div>
            </div>
        </div>
    }
</div>

<!-- Modal -->
@if (showModal)
{
    <div class="modal-overlay" @onclick="CloseModal"></div>
    <div class="modal-glass">
        <div class="modal-glass-content">
            <div class="modal-glass-header">
                <h5 class="text-white fw-bold mb-0">
                    @(isEditMode ? "Editar Transacción" : "Nueva Transacción")
                </h5>
                <button type="button" class="btn-close-glass" @onclick="CloseModal">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            <div class="modal-glass-body">
                @if (!categories.Any())
                {
                    <div class="alert-glass alert-warning">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        No tienes categorías creadas.
                        <a href="/categories" class="alert-link-glass">Crear una categoría primero</a>
                    </div>
                }
                else
                {
                    <EditForm Model="currentTransaction" OnValidSubmit="SaveTransaction">
                        <DataAnnotationsValidator />

                        <div class="form-group-glass">
                            <label class="form-label-glass text-white">Categoría</label>
                            <InputSelect class="form-control-glass" @bind-Value="currentTransaction.CategoryId">
                                <option value="0">-- Selecciona una categoría --</option>
                                @foreach (var category in categories)
                                {
                                    <option value="@category.CategoryId">@category.TitleWithIcon</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => currentTransaction.CategoryId)" class="text-danger small" />
                        </div>

                        <div class="form-group-glass">
                            <label class="form-label-glass text-white">Monto (RD$)</label>
                            <InputNumber class="form-control-glass" @bind-Value="currentTransaction.Amount"
                                         placeholder="0.00" step="0.01" />
                            <ValidationMessage For="@(() => currentTransaction.Amount)" class="text-danger small" />
                        </div>

                        <div class="form-group-glass">
                            <label class="form-label-glass text-white">Nota</label>
                            <InputText class="form-control-glass" @bind-Value="currentTransaction.Note"
                                       placeholder="Descripción de la transacción" />
                            <ValidationMessage For="@(() => currentTransaction.Note)" class="text-danger small" />
                        </div>

                        <div class="form-group-glass">
                            <label class="form-label-glass text-white">Fecha</label>
                            <InputDate class="form-control-glass" @bind-Value="currentTransaction.Date" />
                            <ValidationMessage For="@(() => currentTransaction.Date)" class="text-danger small" />
                        </div>

                        <div class="d-flex gap-2 justify-content-end mt-4">
                            <button type="button" class="glass-button-secondary text-white" @onclick="CloseModal">
                                Cancelar
                            </button>
                            <button type="submit" class="glass-button-action text-white" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                @(isEditMode ? "Actualizar" : "Crear")
                            </button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
}

<style>
    .transactions-container {
        padding: 2rem;
        min-height: 100vh;
    }

    .transactions-header {
        padding: 1.5rem 2rem;
        margin-bottom: 2rem;
    }

    /* Botón de acción principal */
    .glass-button-action {
        background: rgba(76, 175, 80, 0.2);
        border: 1px solid rgba(76, 175, 80, 0.4);
        color: #4CAF50;
        padding: 0.75rem 1.5rem;
        border-radius: 10px;
        font-weight: 600;
        transition: all 0.3s ease;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
    }

        .glass-button-action:hover:not(:disabled) {
            background: rgba(76, 175, 80, 0.3);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(76, 175, 80, 0.3);
        }

        .glass-button-action:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    .glass-button-secondary {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: rgba(255, 255, 255, 0.9);
        padding: 0.75rem 1.5rem;
        border-radius: 10px;
        font-weight: 500;
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .glass-button-secondary:hover {
            background: rgba(255, 255, 255, 0.15);
        }

    /* Filtros Grid */
    .filters-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        padding: 1.5rem;
    }

    .filter-item {
        display: flex;
        flex-direction: column;
    }

    /* Empty State */
    .empty-state-transactions {
        text-align: center;
        padding: 4rem 2rem;
    }

        .empty-state-transactions i {
            font-size: 5rem;
            color: rgba(255, 255, 255, 0.3);
            margin-bottom: 1rem;
        }

    /* Alerts Glass */
    .alert-glass {
        padding: 1rem 1.5rem;
        border-radius: 10px;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .alert-warning {
        background: rgba(255, 193, 7, 0.15);
        border: 1px solid rgba(255, 193, 7, 0.4);
        color: #FFC107;
    }

    .alert-link-glass {
        color: #FFD54F;
        text-decoration: underline;
        font-weight: 600;
    }

        .alert-link-glass:hover {
            color: #FFEB3B;
        }

    /* Tabla Glass */
    .table-glass-transactions {
        width: 100%;
        color: white;
    }

        .table-glass-transactions thead th {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding: 1rem;
            color: rgba(255, 255, 255, 0.7);
            font-weight: 600;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .table-glass-transactions tbody td {
            padding: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
        }

    .transaction-row {
        transition: all 0.3s ease;
    }

        .transaction-row:hover {
            background: rgba(255, 255, 255, 0.05);
            transform: translateX(5px);
        }

    .transaction-icon {
        font-size: 1.5rem;
        display: inline-block;
    }

    .transaction-amount {
        font-weight: 700;
        font-size: 1.1rem;
    }

    .amount-income {
        color: #4CAF50;
    }

    .amount-expense {
        color: #F44336;
    }

    /* Summary Grid */
    .summary-grid {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 1rem;
        padding: 1rem 1.5rem;
    }

    .summary-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: rgba(255, 255, 255, 0.7);
        font-size: 0.9rem;
    }

    .summary-income {
        color: #4CAF50;
        font-weight: 600;
    }

    .summary-expense {
        color: #F44336;
        font-weight: 600;
    }

    /* Botones de acción */
    .btn-action {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        width: 36px;
        height: 36px;
        border-radius: 8px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-left: 0.5rem;
    }

        .btn-action:hover {
            transform: translateY(-2px);
        }

    .btn-edit:hover {
        background: rgba(33, 150, 243, 0.2);
        border-color: rgba(33, 150, 243, 0.4);
        color: #2196F3;
    }

    .btn-delete:hover {
        background: rgba(244, 67, 54, 0.2);
        border-color: rgba(244, 67, 54, 0.4);
        color: #F44336;
    }

    /* Modal Glass */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.7);
        backdrop-filter: blur(8px);
        z-index: 1050;
        animation: fadeIn 0.3s ease;
    }

    .modal-glass {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1051;
        width: 90%;
        max-width: 500px;
        animation: slideInUp 0.3s ease;
    }

    .modal-glass-content {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 16px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
        margin-top: 7rem;
        margin-bottom:3rem;
    }

    .modal-glass-header {
        padding: 0.5rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .btn-close-glass {
        background: rgba(255, 255, 255, 0.1);
        border: none;
        color: white;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .btn-close-glass:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: rotate(90deg);
        }

    .modal-glass-body {
        padding: 0.5rem;
    }

    /* Form Controls Glass */
    .form-group-glass {
        margin-bottom: 1.5rem;
    }

    .form-label-glass {
        color: rgba(255, 255, 255, 0.9);
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
    }

    .form-control-glass {
        width: 100%;
        padding: 0.50rem 1rem;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        color: white;
        transition: all 0.3s ease;
    }

        .form-control-glass:focus {
            background: rgba(255, 255, 255, 0.15);
            border-color: rgba(76, 175, 80, 0.5);
            outline: none;
            box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);
        }

        .form-control-glass::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        /* Select personalizado */
        .form-control-glass select,
        select.form-control-glass {
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='%234CAF50' d='M6 9L1 4h10z'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 1rem center;
            background-size: 12px;
            padding-right: 2.5rem;
            cursor: pointer;
        }


        .form-control-glass option {
            background: rgba(15, 23, 42, 0.95);
            color: white;
            padding: 0.5rem;
        }



        /* Para navegadores webkit (Chrome, Safari, Edge) */
        .form-control-glass select option:checked,
        .form-control-glass select option:hover {
            background: rgba(76, 175, 80, 0.2);
        }

        /* ===== CALENDARIO (InputDate) ===== */

        /* Input de fecha con ícono personalizado */
        .form-control-glass[type="date"] {
            position: relative;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%234CAF50' viewBox='0 0 16 16'%3E%3Cpath d='M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 1rem center;
            background-size: 16px;
            padding-right: 2.75rem;
            cursor: pointer;
        }

            /* Ocultar el ícono por defecto del navegador */
            .form-control-glass[type="date"]::-webkit-calendar-picker-indicator {
                position: absolute;
                right: 1rem;
                width: 20px;
                height: 20px;
                opacity: 0;
                cursor: pointer;
            }

            /* Para Firefox */
            .form-control-glass[type="date"]::-moz-calendar-picker-indicator {
                opacity: 0;
            }

            /* Hover en el input de fecha */
            .form-control-glass[type="date"]:hover {
                background-color: rgba(255, 255, 255, 0.15);
                border-color: rgba(76, 175, 80, 0.5);
            }

            /* Focus en el input de fecha */
            .form-control-glass[type="date"]:focus {
                background-color: rgba(255, 255, 255, 0.15);
                border-color: rgba(76, 175, 80, 0.5);
                box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);
            }

            /* ===== CALENDARIO DESPLEGABLE ===== */

            /* Para Chrome, Edge, Safari (Webkit) */
            .form-control-glass[type="date"]::-webkit-datetime-edit {
                color: white;
            }

            .form-control-glass[type="date"]::-webkit-datetime-edit-fields-wrapper {
                color: white;
            }

            .form-control-glass[type="date"]::-webkit-datetime-edit-text {
                color: rgba(255, 255, 255, 0.7);
                padding: 0 0.25rem;
            }

            .form-control-glass[type="date"]::-webkit-datetime-edit-month-field,
            .form-control-glass[type="date"]::-webkit-datetime-edit-day-field,
            .form-control-glass[type="date"]::-webkit-datetime-edit-year-field {
                color: white;
                font-weight: 500;
            }

            /* Placeholder cuando está vacío */
            .form-control-glass[type="date"]::-webkit-datetime-edit-text::before {
                color: rgba(255, 255, 255, 0.5);
                content: attr(placeholder);
            }

    /* ===== CALENDARIO POPUP ===== */
    /* Nota: Los estilos del popup del calendario son muy limitados por seguridad del navegador,
       pero podemos mejorar la experiencia con estos trucos */

    /* Para navegadores que lo soporten */
    input[type="date"]::-webkit-calendar-picker-indicator:hover {
        background: rgba(76, 175, 80, 0.2);
        border-radius: 4px;
    }





    /* Responsive */
    @@media (max-width: 991px) {
        .transactions-container {
            padding: 1rem;
            padding-top: 2rem;
            margin-top: 50px;
            padding-bottom: 90px;
        }

        .transactions-header {
            padding: 1rem;
        }

        .filters-grid {
            grid-template-columns: 1fr;
            padding: 1rem;
            gap: 1rem;
        }
        /* Selects en tablet */
        .form-control-glass {
            font-size: 0.95rem;
        }

        .filter-item label {
            font-size: 0.9rem;
        }
    }

    @@media (max-width: 576px) {
        .table-glass-transactions {
            font-size: 0.85rem;
        }

        .transaction-icon {
            font-size: 1.2rem;
        }

        .transaction-amount {
            font-size: 1rem;
        }

        .summary-grid {
            flex-direction: column;
            align-items: flex-start;
        }

        .modal-glass {
            width: 95%;
        }
        /* Selects en móvil */
        .form-control-glass,
        select.form-control-glass,
        .form-control-glass select {
            font-size: 0.875rem;
            padding: 0.65rem 2.25rem 0.65rem 0.75rem;
            background-size: 10px;
            background-position: right 0.75rem center;
        }
            /* Options en móvil */
            .form-control-glass option {
                font-size: 0.875rem;
                padding: 0.5rem;
            }
        /* Labels más compactos */
        .filter-item label,
        .form-label-glass {
            font-size: 0.85rem;
            margin-bottom: 0.4rem;
        }
        /* Filtros más compactos */
        .filters-grid {
            padding: 0.75rem;
            gap: 0.75rem;
        }
        /* Modal más compacto en móvil */
        .modal-glass-body {
            padding: 1rem;
        }

        .form-group-glass {
            margin-bottom: 1rem;
        }

        /* Calendario en móvil */
        .form-control-glass[type="date"] {
            font-size: 0.875rem;
            padding: 0.65rem 2.5rem 0.65rem 0.75rem;
            background-size: 14px;
            background-position: right 0.75rem center;
        }

            .form-control-glass[type="date"]::-webkit-calendar-picker-indicator {
                right: 0.75rem;
                width: 18px;
                height: 18px;
            }
    }

    
</style>

@code {
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private string userId = string.Empty;

    private List<TransactionDto> transactions = new();
    private List<CategoryDto> categories = new();
    private TransactionDto currentTransaction = new();

    // Filtros
    private int filterCategoryId = 0;
    private string filterType = "";
    private string sortOrder = "newest";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            await LoadData();
        }

        isLoading = false;
    }

    private async Task LoadData()
    {
        try
        {
            transactions = await TransactionService.GetAllAsync(userId);
            categories = await CategoryService.GetAllAsync(userId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private IEnumerable<TransactionDto> FilteredAndSortedTransactions
    {
        get
        {
            var filtered = transactions.AsEnumerable();

            // Filtrar por categoría
            if (filterCategoryId > 0)
            {
                filtered = filtered.Where(t => t.CategoryId == filterCategoryId);
            }

            // Filtrar por tipo
            if (!string.IsNullOrEmpty(filterType))
            {
                var type = filterType == "Income" ? TransactionType.Income : TransactionType.Expense;
                filtered = filtered.Where(t => GetCategoryType(t.CategoryId) == type);
            }

            // Ordenar
            filtered = sortOrder switch
            {
                "oldest" => filtered.OrderBy(t => t.Date),
                "highest" => filtered.OrderByDescending(t => t.Amount),
                "lowest" => filtered.OrderBy(t => t.Amount),
                _ => filtered.OrderByDescending(t => t.Date) // newest
            };

            return filtered;
        }
    }

    private TransactionType GetCategoryType(int categoryId)
    {
        return categories.FirstOrDefault(c => c.CategoryId == categoryId)?.Type ?? TransactionType.Expense;
    }

    private decimal CalculateTotalIncome()
    {
        return FilteredAndSortedTransactions
            .Where(t => GetCategoryType(t.CategoryId) == TransactionType.Income)
            .Sum(t => t.Amount);
    }

    private decimal CalculateTotalExpense()
    {
        return FilteredAndSortedTransactions
            .Where(t => GetCategoryType(t.CategoryId) == TransactionType.Expense)
            .Sum(t => t.Amount);
    }

    private void OpenCreateModal()
    {
        currentTransaction = new TransactionDto
        {
            Date = DateTime.Now,
            CategoryId = 0
        };
        isEditMode = false;
        showModal = true;
    }

    private void OpenEditModal(TransactionDto transaction)
    {
        currentTransaction = new TransactionDto
        {
            TransactionId = transaction.TransactionId,
            CategoryId = transaction.CategoryId,
            Amount = transaction.Amount,
            Note = transaction.Note,
            Date = transaction.Date
        };
        isEditMode = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentTransaction = new();
        isSaving = false;
    }

    private async Task SaveTransaction()
    {
        try
        {
            if (currentTransaction.CategoryId == 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Por favor selecciona una categoría");
                return;
            }

            isSaving = true;

            if (isEditMode)
            {
                await TransactionService.UpdateAsync(currentTransaction, userId);
            }
            else
            {
                await TransactionService.CreateAsync(currentTransaction, userId);
            }

            await LoadData();
            CloseModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving transaction: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar la transacción");
            isSaving = false;
        }
    }

    private async Task DeleteTransaction(int transactionId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            "¿Estás seguro de eliminar esta transacción? Esta acción no se puede deshacer.");

        if (confirmed)
        {
            try
            {
                await TransactionService.DeleteAsync(transactionId, userId);
                await LoadData();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting transaction: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar la transacción");
            }
        }
    }
}