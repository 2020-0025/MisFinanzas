@page "/categories"
@using MisFinanzas.Domain.DTOs
@using MisFinanzas.Domain.Enums
@using MisFinanzas.Infrastructure.Interfaces
@using System.Security.Claims
@using MisFinanzas.Components.Shared
@inject ICategoryService CategoryService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Categorías - Mis Finanzas</PageTitle>

<div class="container-fluid px-4 py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0">
            <i class="bi bi-folder-fill text-primary me-2"></i>
            Categorías
        </h1>
        <button class="btn btn-primary rounded-pill" @onclick="OpenCreateModal">
            <i class="bi bi-plus-circle me-2"></i>Nueva Categoría
        </button>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (!categories.Any())
    {
        <div class="card border-0 shadow-sm rounded-4">
            <div class="card-body text-center py-5">
                <i class="bi bi-folder-x fs-1 text-muted"></i>
                <h5 class="mt-3">No hay categorías</h5>
                <p class="text-muted">Crea tu primera categoría para organizar tus transacciones</p>
                <button class="btn btn-primary mt-3" @onclick="OpenCreateModal">
                    <i class="bi bi-plus-circle me-2"></i>Crear Categoría
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="card border-0 shadow-sm rounded-4">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="px-4 py-3" style="width: 80px;">Icono</th>
                                <th class="px-4 py-3">Título</th>
                                <th class="px-4 py-3" style="width: 150px;">Tipo</th>
                                <th class="px-4 py-3 text-end" style="width: 150px;">Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var category in categories)
                            {
                                <tr>
                                    <td class="px-4 py-3">
                                        <span style="font-size: 2rem;">@category.Icon</span>
                                    </td>
                                    <td class="px-4 py-3">
                                        <span class="fw-semibold">@category.Title</span>
                                    </td>
                                    <td class="px-4 py-3">
                                        @if (category.Type == TransactionType.Income)
                                        {
                                            <span class="badge bg-success-subtle text-success rounded-pill px-3 py-2">
                                                <i class="bi bi-arrow-up-circle me-1"></i> Ingreso
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger-subtle text-danger rounded-pill px-3 py-2">
                                                <i class="bi bi-arrow-down-circle me-1"></i> Gasto
                                            </span>
                                        }
                                    </td>
                                    <td class="px-4 py-3 text-end">
                                        <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => OpenEditModal(category)">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteCategory(category.CategoryId)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="mt-3 text-muted">
            <small>
                <i class="bi bi-info-circle me-1"></i>
                Total: @categories.Count categoría(s)
            </small>
        </div>
    }
</div>

<!-- Modal -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content rounded-4 shadow">
                <div class="modal-header border-0 pb-0">
                    <h5 class="modal-title fw-bold">
                        @(isEditMode ? "Editar Categoría" : "Nueva Categoría")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body pt-2">
                    <EditForm Model="currentCategory" OnValidSubmit="SaveCategory">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label fw-semibold">Título</label>
                            <InputText class="form-control" @bind-Value="currentCategory.Title"
                                       placeholder="Ej: Comida, Transporte" />
                            <ValidationMessage For="@(() => currentCategory.Title)" class="text-danger small" />
                        </div>

                        <!-- ⭐ NUEVO SELECTOR DE ICONOS -->
                        <IconSelector Label="Icono"
                                      @bind-SelectedIcon="currentCategory.Icon" />
                        <ValidationMessage For="@(() => currentCategory.Icon)" class="text-danger small" />

                        <div class="mb-4">
                            <label class="form-label fw-semibold">Tipo</label>
                            <InputSelect class="form-select" @bind-Value="currentCategory.Type">
                                <option value="@TransactionType.Expense">Gasto</option>
                                <option value="@TransactionType.Income">Ingreso</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => currentCategory.Type)" class="text-danger small" />
                        </div>

                        <div class="d-flex gap-2 justify-content-end">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                                Cancelar
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                @(isEditMode ? "Actualizar" : "Crear")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private string userId = string.Empty;

    private List<CategoryDto> categories = new();
    private CategoryDto currentCategory = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            await LoadCategories();
        }

        isLoading = false;
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await CategoryService.GetAllAsync(userId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
        }
    }

    private void OpenCreateModal()
    {
        currentCategory = new CategoryDto
        {
            Type = TransactionType.Expense,
            Icon = "📁"
        };
        isEditMode = false;
        showModal = true;
    }

    private void OpenEditModal(CategoryDto category)
    {
        currentCategory = new CategoryDto
        {
            CategoryId = category.CategoryId,
            Title = category.Title,
            Icon = category.Icon,
            Type = category.Type
        };
        isEditMode = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentCategory = new();
        isSaving = false;
    }

    private async Task SaveCategory()
    {
        try
        {
            isSaving = true;

            if (isEditMode)
            {
                await CategoryService.UpdateAsync(currentCategory, userId);
            }
            else
            {
                await CategoryService.CreateAsync(currentCategory, userId);
            }

            await LoadCategories();
            CloseModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving category: {ex.Message}");
            isSaving = false;
        }
    }

    private async Task DeleteCategory(int categoryId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            "¿Estás seguro de eliminar esta categoría? Esta acción no se puede deshacer.");

        if (confirmed)
        {
            try
            {
                await CategoryService.DeleteAsync(categoryId, userId);
                await LoadCategories();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert",
                    "No se puede eliminar esta categoría porque tiene transacciones asociadas.");
                Console.WriteLine($"Error deleting category: {ex.Message}");
            }
        }
    }
}
