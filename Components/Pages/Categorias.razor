@page "/categories"
@using MisFinanzas.Domain.DTOs
@using MisFinanzas.Domain.Enums
@using MisFinanzas.Infrastructure.Interfaces
@using System.Security.Claims
@using MisFinanzas.Components.Shared
@inject ICategoryService CategoryService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Categorías - Mis Finanzas</PageTitle>

<div class="categories-container">

    <!-- Header con efecto glass -->
    <div class="glass-card categories-header animate-slide-up">
        <div class="d-flex justify-content-between align-items-center flex-wrap gap-3 text-white">
            <div>
                <h1 class="h3 mb-1 text-white fw-bold">
                    <span style="font-size: 32px;">📁</span>
                    <strong>Categorías</strong>
                </h1>
                <p class="mb-0">Organiza tus transacciones</p>
            </div>
            <button class="glass-button-action text-white" @onclick="OpenCreateModal">
                <span style="font-size: 17px;">➕</span>Nueva Categoría
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="glass-card text-center py-5 animate-slide-up animate-delay-1">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="text-white mt-3 mb-0">Cargando categorías...</p>
        </div>
    }
    else if (!categories.Any())
    {
        <div class="glass-card animate-slide-up animate-delay-1">
            <div class="empty-state-categories">
                <i class="bi bi-folder-x"></i>
                <h5 class="text-white mt-3 mb-2">No hay categorías</h5>
                <p class="text-white-50 mb-4">Crea tu primera categoría para organizar tus transacciones</p>
                <button class="glass-button-action text-white" @onclick="OpenCreateModal">
                    <span style="font-size: 17px;">➕</span>Crear Categoría
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="glass-card animate-slide-up animate-delay-1">
            <div class="table-responsive">
                <table class="table-glass-categories mb-0">
                    <thead>
                        <tr>
                            <th class="text-white" style="width: 80px;">Icono</th>
                            <th class="text-white">Título</th>
                            <th class="text-white" style="width: 180px;">Tipo</th>
                            <th class="text-white text-end" style="width: 150px;">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var category in categories)
                        {
                            <tr class="category-row">
                                <td>
                                    <span class="category-icon">@category.Icon</span>
                                </td>
                                <td>
                                    <span class="text-white fw-semibold">@category.Title</span>
                                </td>
                                <td>
                                    @if (category.Type == TransactionType.Income)
                                    {
                                        <span class="badge-glass badge-income">
                                            <span style="font-size: 13px;">📈</span> Ingreso
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge-glass badge-expense">
                                            <span style="font-size: 13px;">📉</span> Gasto
                                        </span>
                                    }
                                </td>
                                <td class="text-end">
                                    <button class="btn-action btn-edit" @onclick="() => OpenEditModal(category)" title="Editar">
                                        <span style="font-size: 13px;">📝</span>
                                    </button>
                                    <button class="btn-action btn-delete" @onclick="() => DeleteCategory(category.CategoryId)" title="Eliminar">
                                        <span style="font-size: 13px;">🗑️</span>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        //Resumen
        <div class="glass-card mt-3 animate-slide-up animate-delay-2" style="padding: 1rem;">
            <small class="text-white">
                <span style="font-size: 13px;">ℹ️</span>
                Total: @categories.Count categoría(s)
            </small>
        </div>
    }
</div>

<!-- Modal -->
@if (showModal)
{
    <div class="modal-overlay" @onclick="CloseModal"></div>
    <div class="modal-glass">
        <div class="modal-glass-content">
            <div class="modal-glass-header">
                <h5 class="text-white fw-bold mb-0">
                    @(isEditMode ? "Editar Categoría" : "Nueva Categoría")
                </h5>
                <button type="button" class="btn-close-glass" @onclick="CloseModal">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            <div class="modal-glass-body">
                <EditForm Model="currentCategory" OnValidSubmit="SaveCategory">
                    <DataAnnotationsValidator />

                    <div class="form-group-glass">
                        <label class="form-label-glass text-white">Título</label>
                        <InputText class="form-control-glass" @bind-Value="currentCategory.Title"
                                   placeholder="Ej: Comida, Transporte" />
                        <ValidationMessage For="@(() => currentCategory.Title)" class="text-danger small" />
                    </div>

                    <!-- Selector de Iconos -->
                    <div class="form-group-glass text-white">
                        <IconSelector Label="Icono"
                                      @bind-SelectedIcon="currentCategory.Icon" />
                        <ValidationMessage For="@(() => currentCategory.Icon)" class="text-danger small" />
                    </div>

                    <div class="form-group-glass">
                        <label class="form-label-glass text-white">Tipo</label>
                        <InputSelect class="form-control-glass" @bind-Value="currentCategory.Type">
                            <option value="@TransactionType.Expense">Gasto</option>
                            <option value="@TransactionType.Income">Ingreso</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => currentCategory.Type)" class="text-danger small" />
                    </div>

                    <div class="d-flex gap-2 justify-content-end mt-4">
                        <button type="button" class="glass-button-secondary" @onclick="CloseModal">
                            Cancelar
                        </button>
                        <button type="submit" class="glass-button-action" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            @(isEditMode ? "Actualizar" : "Crear")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<style>
    .categories-container {
        padding: 2rem;
        min-height: 100vh;
    }

    .categories-header {
        padding: 1.5rem 2rem;
        margin-bottom: 2rem;
    }

    /* Botón de acción principal */
    .glass-button-action {
        background: rgba(76, 175, 80, 0.2);
        border: 1px solid rgba(76, 175, 80, 0.4);
        color: #4CAF50;
        padding: 0.75rem 1.5rem;
        border-radius: 10px;
        font-weight: 600;
        transition: all 0.3s ease;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
    }

        .glass-button-action:hover:not(:disabled) {
            background: rgba(76, 175, 80, 0.3);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(76, 175, 80, 0.3);
        }

        .glass-button-action:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    .glass-button-secondary {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: rgba(255, 255, 255, 0.9);
        padding: 0.75rem 1.5rem;
        border-radius: 10px;
        font-weight: 500;
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .glass-button-secondary:hover {
            background: rgba(255, 255, 255, 0.15);
        }

    /* Empty State */
    .empty-state-categories {
        text-align: center;
        padding: 4rem 2rem;
    }

        .empty-state-categories i {
            font-size: 5rem;
            color: rgba(255, 255, 255, 0.3);
            margin-bottom: 1rem;
        }

    /* Tabla Glass */
    .table-glass-categories {
        width: 100%;
        color: white;
    }

        .table-glass-categories thead th {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding: 1rem;
            color: rgba(255, 255, 255, 0.7);
            font-weight: 600;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .table-glass-categories tbody td {
            padding: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
        }

    .category-row {
        transition: all 0.3s ease;
    }

        .category-row:hover {
            background: rgba(255, 255, 255, 0.05);
            transform: translateX(5px);
        }

    .category-icon {
        font-size: 2rem;
        display: inline-block;
    }

    /* Badges Glass */
    .badge-glass {
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
    }

    .badge-income {
        background: rgba(76, 175, 80, 0.2);
        border: 1px solid rgba(76, 175, 80, 0.4);
        color: #4CAF50;
    }

    .badge-expense {
        background: rgba(244, 67, 54, 0.2);
        border: 1px solid rgba(244, 67, 54, 0.4);
        color: #F44336;
    }

    /* Botones de acción */
    .btn-action {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        width: 36px;
        height: 36px;
        border-radius: 8px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-left: 0.5rem;
    }

        .btn-action:hover {
            transform: translateY(-2px);
        }

    .btn-edit:hover {
        background: rgba(33, 150, 243, 0.2);
        border-color: rgba(33, 150, 243, 0.4);
        color: #2196F3;
    }

    .btn-delete:hover {
        background: rgba(244, 67, 54, 0.2);
        border-color: rgba(244, 67, 54, 0.4);
        color: #F44336;
    }

    /* Modal Glass */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.7);
        backdrop-filter: blur(8px);
        z-index: 1050;
        animation: fadeIn 0.3s ease;
    }

    .modal-glass {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1051;
        width: 90%;
        max-width: 500px;
        animation: slideInUp 0.3s ease;
    }

    .modal-glass-content {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 16px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
        margin-top: 3rem;
    }

    .modal-glass-header {
        padding: 1.5rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .btn-close-glass {
        background: rgba(255, 255, 255, 0.1);
        border: none;
        color: white;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .btn-close-glass:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: rotate(90deg);
        }

    .modal-glass-body {
        padding: 1.5rem;
    }

    /* Form Controls Glass */
    .form-group-glass {
        margin-bottom: 1.5rem;
    }

    .form-label-glass {
        color: rgba(255, 255, 255, 0.9);
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
    }

    .form-control-glass {
        width: 100%;
        padding: 0.75rem 1rem;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        color: white;
        transition: all 0.3s ease;
    }

        .form-control-glass:focus {
            background: rgba(255, 255, 255, 0.15);
            border-color: rgba(76, 175, 80, 0.5);
            outline: none;
            box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);
        }

        .form-control-glass::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        /* Select personalizado */
        .form-control-glass select,
        select.form-control-glass {
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='%234CAF50' d='M6 9L1 4h10z'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 1rem center;
            background-size: 12px;
            padding-right: 2.5rem;
            cursor: pointer;
            
        }
     

        .form-control-glass option {
            background: rgba(15, 23, 42, 0.95);
            color: white;
            padding: 0.5rem;

        }

            

        /* Para navegadores webkit (Chrome, Safari, Edge) */
        .form-control-glass select option:checked,
        .form-control-glass select option:hover {
            background: rgba(76, 175, 80, 0.2);
        }

    /* Responsive */
    @@media (max-width: 991px) {
        .categories-container

    {
        padding: 1rem;
        margin-top: 50px;
        padding-bottom: 90px;
    }

    .categories-header {
        padding: 1rem;
    }

    }

    @@media (max-width: 576px) {
        .table-glass-categories

    {
        font-size: 0.85rem;
    }

    .category-icon {
        font-size: 1.5rem;
    }

    .btn-action {
        width: 32px;
        height: 32px;
    }

    .modal-glass {
        width: 95%;
    }

    }
</style>

@code {
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private string userId = string.Empty;

    private List<CategoryDto> categories = new();
    private CategoryDto currentCategory = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            await LoadCategories();
        }

        isLoading = false;
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await CategoryService.GetAllAsync(userId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
        }
    }

    private void OpenCreateModal()
    {
        currentCategory = new CategoryDto
        {
            Type = TransactionType.Expense,
            Icon = "📁"
        };
        isEditMode = false;
        showModal = true;
    }

    private void OpenEditModal(CategoryDto category)
    {
        currentCategory = new CategoryDto
        {
            CategoryId = category.CategoryId,
            Title = category.Title,
            Icon = category.Icon,
            Type = category.Type
        };
        isEditMode = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentCategory = new();
        isSaving = false;
    }

    private async Task SaveCategory()
    {
        try
        {
            isSaving = true;

            if (isEditMode)
            {
                await CategoryService.UpdateAsync(currentCategory, userId);
            }
            else
            {
                await CategoryService.CreateAsync(currentCategory, userId);
            }

            await LoadCategories();
            CloseModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving category: {ex.Message}");
            isSaving = false;
        }
    }

    private async Task DeleteCategory(int categoryId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            "¿Estás seguro de eliminar esta categoría? Esta acción no se puede deshacer.");

        if (confirmed)
        {
            try
            {
                await CategoryService.DeleteAsync(categoryId, userId);
                await LoadCategories();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert",
                    "No se puede eliminar esta categoría porque tiene transacciones asociadas.");
                Console.WriteLine($"Error deleting category: {ex.Message}");
            }
        }
    }
}
